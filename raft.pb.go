// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	VoteRequest
	VoteReply
	AppendRequest
	AppendReply
	RaftLog
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VoteRequest struct {
	Peer           string `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Term           uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	LatestLogTerm  uint64 `protobuf:"varint,3,opt,name=latestLogTerm" json:"latestLogTerm,omitempty"`
	LatestLogIndex uint64 `protobuf:"varint,4,opt,name=latestLogIndex" json:"latestLogIndex,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VoteRequest) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *VoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteRequest) GetLatestLogTerm() uint64 {
	if m != nil {
		return m.LatestLogTerm
	}
	return 0
}

func (m *VoteRequest) GetLatestLogIndex() uint64 {
	if m != nil {
		return m.LatestLogIndex
	}
	return 0
}

type VoteReply struct {
	Peer    string `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Granted bool   `protobuf:"varint,2,opt,name=granted" json:"granted,omitempty"`
	Term    uint64 `protobuf:"varint,3,opt,name=term" json:"term,omitempty"`
}

func (m *VoteReply) Reset()                    { *m = VoteReply{} }
func (m *VoteReply) String() string            { return proto.CompactTextString(m) }
func (*VoteReply) ProtoMessage()               {}
func (*VoteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VoteReply) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *VoteReply) GetGranted() bool {
	if m != nil {
		return m.Granted
	}
	return false
}

func (m *VoteReply) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type AppendRequest struct {
	Peer             string     `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Term             uint64     `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	PreviousLogTerm  uint64     `protobuf:"varint,3,opt,name=previousLogTerm" json:"previousLogTerm,omitempty"`
	PreviousLogIndex uint64     `protobuf:"varint,4,opt,name=previousLogIndex" json:"previousLogIndex,omitempty"`
	CommintIndex     uint64     `protobuf:"varint,5,opt,name=commintIndex" json:"commintIndex,omitempty"`
	Entries          []*RaftLog `protobuf:"bytes,6,rep,name=entries" json:"entries,omitempty"`
}

func (m *AppendRequest) Reset()                    { *m = AppendRequest{} }
func (m *AppendRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()               {}
func (*AppendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendRequest) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *AppendRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendRequest) GetPreviousLogTerm() uint64 {
	if m != nil {
		return m.PreviousLogTerm
	}
	return 0
}

func (m *AppendRequest) GetPreviousLogIndex() uint64 {
	if m != nil {
		return m.PreviousLogIndex
	}
	return 0
}

func (m *AppendRequest) GetCommintIndex() uint64 {
	if m != nil {
		return m.CommintIndex
	}
	return 0
}

func (m *AppendRequest) GetEntries() []*RaftLog {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendReply struct {
	Peer    string `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Term    uint64 `protobuf:"varint,3,opt,name=term" json:"term,omitempty"`
}

func (m *AppendReply) Reset()                    { *m = AppendReply{} }
func (m *AppendReply) String() string            { return proto.CompactTextString(m) }
func (*AppendReply) ProtoMessage()               {}
func (*AppendReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppendReply) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *AppendReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendReply) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type RaftLog struct {
	Term    uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RaftLog) Reset()                    { *m = RaftLog{} }
func (m *RaftLog) String() string            { return proto.CompactTextString(m) }
func (*RaftLog) ProtoMessage()               {}
func (*RaftLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RaftLog) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RaftLog) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RaftLog) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*VoteRequest)(nil), "raft.VoteRequest")
	proto.RegisterType((*VoteReply)(nil), "raft.VoteReply")
	proto.RegisterType((*AppendRequest)(nil), "raft.AppendRequest")
	proto.RegisterType((*AppendReply)(nil), "raft.AppendReply")
	proto.RegisterType((*RaftLog)(nil), "raft.RaftLog")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := grpc.Invoke(ctx, "/raft.Raft/Vote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error) {
	out := new(AppendReply)
	err := grpc.Invoke(ctx, "/raft.Raft/Append", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	Vote(context.Context, *VoteRequest) (*VoteReply, error)
	Append(context.Context, *AppendRequest) (*AppendReply, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _Raft_Vote_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Raft_Append_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x4f, 0x32, 0x31,
	0x10, 0xfd, 0xf6, 0x63, 0x01, 0x19, 0x40, 0x64, 0xf4, 0xb0, 0xe1, 0x44, 0x36, 0x46, 0x37, 0xc6,
	0x70, 0xc0, 0x5f, 0xe0, 0xd1, 0x44, 0x62, 0xd2, 0x18, 0xef, 0x95, 0x1d, 0x70, 0x93, 0x65, 0x5b,
	0xdb, 0x62, 0xe4, 0xec, 0xbf, 0xf4, 0xd7, 0x98, 0xb6, 0x2c, 0xee, 0x22, 0x31, 0xf1, 0x36, 0xf3,
	0xde, 0xb4, 0x7d, 0xef, 0x4d, 0x01, 0x14, 0x5f, 0x98, 0x89, 0x54, 0xc2, 0x08, 0x0c, 0x6d, 0x1d,
	0x7f, 0x04, 0xd0, 0x7d, 0x12, 0x86, 0x18, 0xbd, 0xae, 0x49, 0x1b, 0x44, 0x08, 0x25, 0x91, 0x8a,
	0x82, 0x71, 0x90, 0x74, 0x98, 0xab, 0x2d, 0x66, 0x48, 0xad, 0xa2, 0xff, 0xe3, 0x20, 0x09, 0x99,
	0xab, 0xf1, 0x1c, 0xfa, 0x39, 0x37, 0xa4, 0xcd, 0xbd, 0x58, 0x3e, 0x5a, 0xb2, 0xe1, 0xc8, 0x3a,
	0x88, 0x17, 0x70, 0xbc, 0x03, 0xee, 0x8a, 0x94, 0xde, 0xa3, 0xd0, 0x8d, 0xed, 0xa1, 0xf1, 0x0c,
	0x3a, 0x5e, 0x84, 0xcc, 0x37, 0x07, 0x25, 0x44, 0xd0, 0x5e, 0x2a, 0x5e, 0x18, 0x4a, 0x9d, 0x8a,
	0x23, 0x56, 0xb6, 0x3b, 0x71, 0x8d, 0x6f, 0x71, 0xf1, 0x67, 0x00, 0xfd, 0x5b, 0x29, 0xa9, 0x48,
	0xff, 0x6a, 0x2b, 0x81, 0x81, 0x54, 0xf4, 0x96, 0x89, 0xb5, 0xae, 0x1b, 0xdb, 0x87, 0xf1, 0x0a,
	0x4e, 0x2a, 0x50, 0xd5, 0xdc, 0x0f, 0x1c, 0x63, 0xe8, 0xcd, 0xc5, 0x6a, 0x95, 0x15, 0xc6, 0xcf,
	0x35, 0xdd, 0x5c, 0x0d, 0xc3, 0x4b, 0x68, 0x53, 0x61, 0x54, 0x46, 0x3a, 0x6a, 0x8d, 0x1b, 0x49,
	0x77, 0xda, 0x9f, 0xb8, 0x65, 0x31, 0xbe, 0xb0, 0x39, 0xb1, 0x92, 0x8d, 0x1f, 0xa0, 0x5b, 0x7a,
	0xfb, 0x25, 0x2d, 0xbd, 0x9e, 0xcf, 0x49, 0xeb, 0x32, 0xad, 0x6d, 0x7b, 0x30, 0xad, 0x19, 0xb4,
	0xb7, 0x8f, 0xec, 0xe8, 0xa0, 0x12, 0xc9, 0x19, 0x34, 0x33, 0xa7, 0xda, 0xe7, 0xe4, 0x1b, 0xfb,
	0x84, 0xe4, 0x9b, 0x5c, 0xf0, 0xd4, 0xdd, 0xd5, 0x63, 0x65, 0x3b, 0x7d, 0x81, 0xd0, 0x5e, 0x87,
	0xd7, 0x10, 0xda, 0x9d, 0xe2, 0xd0, 0xfb, 0xa8, 0x7c, 0xb2, 0xd1, 0xa0, 0x0a, 0xc9, 0x7c, 0x13,
	0xff, 0xc3, 0x29, 0xb4, 0xbc, 0x2b, 0x3c, 0xf5, 0x64, 0x6d, 0x7f, 0xa3, 0x61, 0x1d, 0x74, 0x67,
	0x9e, 0x5b, 0xee, 0x23, 0xdf, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0x22, 0x6e, 0x79, 0xef, 0xd6,
	0x02, 0x00, 0x00,
}
