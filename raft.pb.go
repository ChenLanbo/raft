// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	VoteRequest
	VoteReply
	AppendRequest
	AppendReply
	RaftLog
*/
package raft

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type VoteRequest struct {
	Peer           string `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Term           uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	LatestLogTerm  uint64 `protobuf:"varint,3,opt,name=latestLogTerm" json:"latestLogTerm,omitempty"`
	LatestLogIndex uint64 `protobuf:"varint,4,opt,name=latestLogIndex" json:"latestLogIndex,omitempty"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}

type VoteReply struct {
	Peer    string `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Granted bool   `protobuf:"varint,2,opt,name=granted" json:"granted,omitempty"`
	Term    uint64 `protobuf:"varint,3,opt,name=term" json:"term,omitempty"`
}

func (m *VoteReply) Reset()         { *m = VoteReply{} }
func (m *VoteReply) String() string { return proto.CompactTextString(m) }
func (*VoteReply) ProtoMessage()    {}

type AppendRequest struct {
	Peer             string     `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Term             uint64     `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	PreviousLogTerm  uint64     `protobuf:"varint,3,opt,name=previousLogTerm" json:"previousLogTerm,omitempty"`
	PreviousLogIndex uint64     `protobuf:"varint,4,opt,name=previousLogIndex" json:"previousLogIndex,omitempty"`
	CommintIndex     uint64     `protobuf:"varint,5,opt,name=commintIndex" json:"commintIndex,omitempty"`
	Entries          []*RaftLog `protobuf:"bytes,6,rep,name=entries" json:"entries,omitempty"`
}

func (m *AppendRequest) Reset()         { *m = AppendRequest{} }
func (m *AppendRequest) String() string { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()    {}

func (m *AppendRequest) GetEntries() []*RaftLog {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendReply struct {
	Peer    string `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Term    uint64 `protobuf:"varint,3,opt,name=term" json:"term,omitempty"`
}

func (m *AppendReply) Reset()         { *m = AppendReply{} }
func (m *AppendReply) String() string { return proto.CompactTextString(m) }
func (*AppendReply) ProtoMessage()    {}

type RaftLog struct {
	Term    uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RaftLog) Reset()         { *m = RaftLog{} }
func (m *RaftLog) String() string { return proto.CompactTextString(m) }
func (*RaftLog) ProtoMessage()    {}

func init() {
}

// Client API for Raft service

type RaftClient interface {
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := grpc.Invoke(ctx, "/raft.Raft/Vote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error) {
	out := new(AppendReply)
	err := grpc.Invoke(ctx, "/raft.Raft/Append", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	Vote(context.Context, *VoteRequest) (*VoteReply, error)
	Append(context.Context, *AppendRequest) (*AppendReply, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Vote_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(VoteRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftServer).Vote(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Raft_Append_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(AppendRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftServer).Append(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _Raft_Vote_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Raft_Append_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
